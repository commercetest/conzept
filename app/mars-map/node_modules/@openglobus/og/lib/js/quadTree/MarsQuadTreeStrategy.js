import { Extent } from "../Extent";
import { EPSG4326 } from "../proj/EPSG4326";
import { Node } from "../quadTree/Node";
import { SegmentLonLatWgs84 } from "../segment/SegmentLonLatWgs84";
import { QuadTreeStrategy } from "./QuadTreeStrategy";
import { getTileCellExtent, getTileCellIndex, TILEGROUP_COMMON } from "../segment/Segment";
export class MarsQuadTreeStrategy extends QuadTreeStrategy {
    constructor(planet) {
        super(planet, "Mars", EPSG4326);
        this._westExtent = Extent.createFromArray([-180, -90, 0, 90]);
        this._eastExtent = Extent.createFromArray([0, -90, 180, 90]);
    }
    init() {
        this._quadTreeList = [
            new Node(SegmentLonLatWgs84, this.planet, 0, null, 0, this._westExtent),
            new Node(SegmentLonLatWgs84, this.planet, 0, null, 0, this._eastExtent)
        ];
    }
    getTileXY(lonLat, zoom) {
        let z = zoom, x = -1, y = -1, pz = (1 << z);
        if (lonLat.lon > 0) {
            x = getTileCellIndex(lonLat.lon, 180 / pz, 0) + pz;
        }
        else {
            x = getTileCellIndex(lonLat.lon, 180 / pz, -180);
        }
        y = getTileCellIndex(lonLat.lat, 180 / pz, 90);
        return [x, y, z, TILEGROUP_COMMON];
    }
    getLonLatTileOffset(lonLat, x, y, z, gridSize) {
        let coords = lonLat;
        let extent = new Extent();
        if (lonLat.lon > 0) {
            extent = getTileCellExtent(x - (1 << z), y, z, this._westExtent);
        }
        else {
            extent = getTileCellExtent(x, y, z, this._eastExtent);
        }
        let sizeImgW = extent.getWidth() / (gridSize - 1), sizeImgH = extent.getHeight() / (gridSize - 1);
        let i = gridSize - Math.ceil((coords.lat - extent.southWest.lat) / sizeImgH) - 1, j = Math.floor((coords.lon - extent.southWest.lon) / sizeImgW);
        return [i, j];
    }
}
