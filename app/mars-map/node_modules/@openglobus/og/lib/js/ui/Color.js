import { View } from './View';
import { stringTemplate } from '../utils/shared';
const COLOR_EVENTS = ["input"];
const TEMPLATE = `<div class="og-color">
      <label for="{id}" class="og-color-label">{label}</label>
      <input type="color" name="{id}" value="{value}"/>
    </div>`;
let __labelCounter__ = 0;
class Color extends View {
    constructor(options = {}) {
        super({
            template: stringTemplate(TEMPLATE, {
                id: `color-${__labelCounter__++}`,
                label: options.label || ""
            })
        });
        this._onInput = (e) => {
            //@ts-ignore
            this.value = e.target.value;
        };
        //@ts-ignore
        this.events = this.events.registerNames(COLOR_EVENTS);
        this._value = options.value || "blue";
        this.$label = null;
        this.$input = null;
    }
    render(params) {
        super.render(params);
        this.$label = this.select(".og-color-label");
        if (this.$label.innerHTML === "") {
            this.$label.style.display = "none";
        }
        this.$input = this.select("input");
        this._initEvents();
        return this;
    }
    set value(val) {
        if (val !== this._value) {
            this._value = val;
            this.$input.value = this._value;
            this.events.dispatch(this.events.input, this._value, this);
        }
    }
    get value() {
        return this._value;
    }
    _initEvents() {
        this.$input.addEventListener("input", this._onInput);
    }
    _clearEvents() {
        this.$input.removeEventListener("input", this._onInput);
    }
    remove() {
        this._clearEvents();
        super.remove();
    }
}
export { Color };
