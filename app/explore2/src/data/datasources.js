const datasources = {

  'wikipedia': {
    active:                 false,
    name:                   'Wikipedia',
    description:            'encyclopedic topics',
    tag:                    'general',
    qid:                    'Q52',
    protocol:               'rest',
    endpoint:               'wikipedia.org/w/api.php',
    format:                 'json',
    connect:                'jsonp',
    pagesize:               5,
    sort_map:               { // https://www.mediawiki.org/wiki/Help:CirrusSearch
                              'none'            : 'relevance',
                              'relevance-desc'  : 'relevance',
                              'relevance-asc'   : 'random',
                              'date-desc'       : 'create_timestamp_asc',
                              'date-asc'        : 'create_timestamp_desc',
                              'update-desc'     : 'last_edit_desc',
                              'update-asc'      : 'last_edit_asc',
                              'random'          : 'random',
                              'citations-desc'  : 'incoming_links_desc',
                              'citations-asc'   : 'incoming_links_asc',
                              'title-desc'      : 'just_match',
                              'title-asc'       : 'just_match',
                              'distance-desc'   : 'relevance', // see: https://www.mediawiki.org/wiki/Help:CirrusSearch#Geo_Search
                              'distance-asc'    : 'relevance', //   example: "nearcoord:42km,37.77666667,-122.39"
                            },
    media:                  [ 'text' ],
    filter_map:             { // https://www.mediawiki.org/wiki/Help:CirrusSearch#Filters
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    // Wikipedia API: https://www.mediawiki.org/wiki/API:Main_page
    url:                    'https://${explore.language}.${datasources.wikipedia.endpoint}?action=query&format=${datasources.wikipedia.format}&srsearch=${term}&srnamespace=0|14&srlimit=${datasources.wikipedia.pagesize}&srsort=${ valid( sortby )? sortby : "relevance" }&list=search&continue=-||&sroffset=${ (explore.page -1) * datasources.wikipedia.pagesize}',
    // SORTING: 
    icon:                   '<i class="fa-brands fa-wikipedia-w"></i>',
    icon_invert:            false,
    display_url:            'https://${explore.host}${explore.base}/app/wikipedia/?q=${qid}&lang=${language}', // TODO
    code_data_collect:      'my_promises.push( processResultsWikipedia( topicResults, struct, index ) );', // FIXME: invert control (see next line)
    //code_data_collect:    'processResultsWikipedia( my_promises, topicResults, struct, index );',
    code_autocomplete:      'autocompleteWikipedia( r, dataset )',
    code_resolve:           'resolveWikipedia( result, renderObject )',
    code_render_mark:       'renderMarkWikipedia( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'opensearch',
    autocomplete_url:       'https://${explore.language}.wikipedia.org/w/api.php?action=${datasources.wikipedia.autocomplete_protocol}&format=${datasources.wikipedia.autocomplete_format}&search=${term}&namespace=${datasources.wikipedia.autocomplete_filter}&srsort=${ valid( sortby )? sortby : "relevance" }&limit=${datasources.wikipedia.autocomplete_limit}&profile=${datasources.wikipedia.autocomplete_mode}',
    autocomplete_format:    'json',
    autocomplete_connect:   'jsonp',
    autocomplete_limit:     7,
    autocomplete_filter:    '0|14', // Wikipedia-API specific: list of Wikipedia namespaces
    autocomplete_mode:      'fuzzy',
  },

  'wikidata': {
    active:                 false,
    name:                   'Wikidata',
    description:            'knowledge base topics',
    tag:                    'general',
    qid:                    'Q2013',
    protocol:               'sparql',
    endpoint:               'https://query.wikidata.org/sparql',
    format:                 'json',
    connect:                'json',
    pagesize:               5, // NOTE: sync this value with "structured query builder"!
    sort_map:               {
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    media:                  [ 'text' ],
    filter_map:             { // https://www.mediawiki.org/wiki/Help:CirrusSearch#Filters
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              '3D'              : '',
                              'data'            : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    count_url:              '${datasources.wikidata.endpoint}?format=${datasources.wikidata.format}&query=SELECT (COUNT(*) AS ?count) WHERE { hint:Query hint:optimizer "None".  VALUES ?searchTerm { "${term.replace( /"/gm, "" )}" } SERVICE wikibase:mwapi { bd:serviceParam wikibase:api "EntitySearch".  bd:serviceParam wikibase:endpoint "www.wikidata.org".  bd:serviceParam mwapi:search ?searchTerm.  bd:serviceParam mwapi:language "${explore.language}".  ?item wikibase:apiOutputItem mwapi:item.  } ${ setWikidataQueryFilter() } SERVICE wikibase:label { bd:serviceParam wikibase:language "${explore.language}". } }',
    url:                    '${datasources.wikidata.endpoint}?format=${datasources.wikidata.format}&query=SELECT ?item ?itemLabel WHERE { hint:Query hint:optimizer "None".  VALUES ?searchTerm { "${term.replace( /"/gm, "" )}" } SERVICE wikibase:mwapi { bd:serviceParam wikibase:api "EntitySearch".  bd:serviceParam wikibase:endpoint "www.wikidata.org".  bd:serviceParam mwapi:search ?searchTerm.  bd:serviceParam mwapi:language "${explore.language}".  ?item wikibase:apiOutputItem mwapi:item.  } ${ setWikidataQueryFilter() } SERVICE wikibase:label { bd:serviceParam wikibase:language "${explore.language}". } } OFFSET ${ (explore.page -1) * datasources.wikidata.pagesize } LIMIT ${datasources.wikidata.pagesize}',
    icon:                   '<img class="datasource-icon" alt="Wikidata datasource" src="/assets/icons/wikidata.png"></img>',
    icon_invert:            false,
    display_url:            'https://${explore.host}${explore.base}/app/wikidata/?q=${qid}&lang=${language}',
    code_autocomplete:      'autocompleteWikidata( r, dataset )',
    code_data_collect:      'processResultsWikidata( my_promises, topicResults, struct, index );',
    code_resolve:           'resolveWikidata( result, renderObject )',
    code_count:             'countWikidata( r, struct, index )',
    code_render_mark:       'renderMarkWikidata( inputs, source, q_, show_raw_results, id )',
    instance:               'https://www.wikidata.org',             // Wikibase specific
    instance_api:           'https://www.wikidata.org/w/api.php',   // Wikibase specific
    autocomplete_active:    true,
    autocomplete_protocol:  'sparql',
    autocomplete_url:       '${datasources.wikidata.endpoint}?format=${datasources.wikidata.autocomplete_format}&query=SELECT DISTINCT ?item ?itemLabel { hint:Query hint:optimizer "None".  VALUES ?searchTerm { "${term.replace( /"/gm, "" )}" } SERVICE wikibase:mwapi { bd:serviceParam wikibase:api "EntitySearch".  bd:serviceParam wikibase:endpoint "www.wikidata.org".  bd:serviceParam wikibase:limit ${datasources.wikidata.autocomplete_limit} .  bd:serviceParam mwapi:search ?searchTerm.  bd:serviceParam mwapi:language "${explore.language}".  ?item wikibase:apiOutputItem mwapi:item. ?num wikibase:apiOrdinal true.  } ?item (wdt:P279|wdt:P31) ?type. ${ setWikidataQueryFilter() } SERVICE wikibase:label { bd:serviceParam wikibase:language "${explore.language}". } } ORDER BY ?searchTerm ?num',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
    autocomplete_mode:      '',
  },

  'commons': {
    active:                 false,
    name:                   'Wikimedia Commons',
    description:            'media library',
    tag:                    'arts-culture',
    qid:                    'Q565',
    protocol:               'rest',
    endpoint:               'https://commons.wikimedia.org/w/api.php',// see: https://commons.wikimedia.org/w/api.php
                                                                      //      https://commons.wikimedia.org/w/api.php?action=help&modules=query
    format:                 'json',
    connect:                'json',
    pagesize:               4,
    sort_map:               {  // no sort available?
                                // https://phabricator.wikimedia.org/T219576
                                // https://www.mediawiki.org/wiki/Help:CirrusSearch
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
                            // https://commons.wikimedia.org/wiki/Special:MediaStatistics
    media:                  [ 'text', 'image', 'video', 'audio', 'software', 'archive' ],
    filter_map:             { // https://www.mediawiki.org/wiki/Help:CirrusSearch#File_properties_search
                              'none'            : '',
                              'text'            : 'text|office',
                              'image'           : 'bitmap|drawing',
                              'video'           : 'video',
                              'audio'           : 'audio',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : 'executable',
                              'archive'         : 'archive',
                              'entity'          : '',
                            },
                            // https://commons.wikimedia.org/w/api.php?action=query&cirrusDumpResult=true&format=json&generator=search&gsrlimit=4&gsrnamespace=6&gsroffset=0&gsrsearch=filetype:bitmap|drawing%20-fileres:0%20custommatch:depicts_or_linked_from=Q152&origin=*
    url:                    '${datasources.commons.endpoint}?action=query&cirrusDumpResult=true&format=json&generator=search&gsrlimit=${datasources.commons.pagesize}&gsrnamespace=6&gsroffset=${ (explore.page -1) * ( datasources.commons.pagesize + 1 ) }&gsrsearch=${ valid( filterby ) && Object.values( d.filter_map ).includes( filterby ) ? "filetype:" + filterby  : "filetype:bitmap|drawing|video|audio|text|executable|archive" }%20-fileres:0%20custommatch:depicts_or_linked_from=${ valid( explore.q_qid ) ? explore.q_qid : "Q0" }&origin=*',
    icon:                   '<img class="datasource-icon" alt="Wikimedia Commons datasource" src="/assets/icons/commons.svg" alt="Wikimedia Commons logo">',
    icon_invert:            false,
    display_url:            'https://commons.wikimedia.org/wiki/File:${ file }',
    code_autocomplete:      'autocompleteCommons( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsCommons( topicResults, struct, index ) );',
    code_resolve:           'resolveCommons( result, renderObject )',
    code_render_mark:       'renderMarkCommons( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    false, // TODO?
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.commons.endpoint}/suggest?q=${term}&limit=${datasources.commons.autocomplete_limit}&offset=0',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     4,
  },

  'archive': {
    active:                 false,
    name:                   'Internet Archive',
    description:            'media library',
    tag:                    'arts-culture',
    qid:                    'Q461',
    protocol:               'rest',
    endpoint:               'https://archive.org/advancedsearch.php',
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               { // see: https://archive.org/advancedsearch.php
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : 'publicdate+desc',
                              'date-asc'        : 'publicdate+asc',
                              'update-desc'     : 'updatedate+desc',
                              'update-asc'      : 'updatedate+asc',
                              'random'          : 'random+asc',
                              'citations-desc'  : 'item_count+desc',  // files_count+desc
                              'citations-asc'   : 'item_count+asc',   // files_count+asc
                              'title-desc'      : 'titleSorter+desc',
                              'title-asc'       : 'titleSorter+asc',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    media:                  [ 'text', 'image', 'video', 'audio', 'data', 'software', 'archive' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : 'texts',
                              'image'           : 'image',
                              'video'           : 'movies',
                              'audio'           : 'audio',
                              'data'            : 'data',
                              '3D'              : '',
                              'software'        : 'software',
                              'archive'         : 'web',
                              'entity'          : '',
                            },
    url:                    '${datasources.archive.endpoint}?sort[]=${ valid( sortby )? sortby : "" }&rows=${datasources.archive.pagesize}&output=json&page=${explore.page}&language%3A"${ wp_languages[ explore.language ].name }"&q=${term}${ valid( filterby ) && Object.values( d.filter_map ).includes( filterby ) ? "+AND+mediatype%3A(" + filterby + ")" : "" }',
    icon:                   '<img class="datasource-icon" alt="Internet Archive datasource" src="/assets/icons/archive.svg" alt="Internet Archive logo">',
    icon_invert:            true,
    display_url:            'https://archive.org/details/${gid}/?q=${ setQuotes( term ) }&autoplay=1',
    // TODO: search_url:    'https://archive.org/search?query=${term}&language%3A"${ wp_languages[ explore.language ].name }"',
    code_autocomplete:      'autocompleteArchive( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsArchive( topicResults, struct, index ) );',
    code_resolve:           'resolveArchive( result, renderObject )',
    code_render_mark:       'renderMarkArchive( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.archive.endpoint}?sort[]=${ valid( sortby )? sortby : "" }&rows=${datasources.archive.autocomplete_limit}&output=json&page=1&language%3A"${ wp_languages[ explore.language ].name }"&fl[]=title&q=%22${term}%22${ valid( filterby ) && Object.values( d.filter_map ).includes( filterby ) ? "+AND+mediatype%3A(" + filterby + ")" : "" }',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'europeana': {
    active:                 false,
    name:                   'Europeana',
    description:            '🇪🇺 European media library',
    tag:                    'arts-culture',
    qid:                    'Q461',
    protocol:               'rest',
    endpoint:               'https://api.europeana.eu', // see: https://pro.europeana.eu/page/search
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : 'score+desc',
                              'relevance-desc'  : 'score+desc',
                              'relevance-asc'   : 'score+asc',
                              'date-desc'       : 'timestamp_created+desc',
                              'date-asc'        : 'timestamp_created+asc',
                              'update-desc'     : 'timestamp_update+desc',
                              'update-asc'      : 'timestamp_update+asc',
                              'random'          : 'random+asc',
                              'citations-desc'  : 'score+desc',
                              'citations-asc'   : 'score+desc',
                              'title-desc'      : 'score+desc',
                              'title-asc'       : 'score+desc',
                              'distance-desc'   : 'score+desc', // TO RESEARCH: geo-tag: https://pro.europeana.eu/page/annotations
                              'distance-asc'    : 'score+desc',
                            },
    media:                  [ 'text', 'image', 'video', 'audio', '3D' ],
    filter_map:             { // https://pro.europeana.eu/page/intro
                              'none'            : '',
                              'text'            : 'text',
                              'image'           : 'image',
                              'video'           : 'video',
                              'audio'           : 'sound',
                              'data'            : '',
                              '3D'              : '3D',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.europeana.endpoint}/record/search.json?wskey=4ZViVZKMe&view=grid&query=${term}&media=true&sort=${ valid( sortby )? sortby : "score+desc" }&profile=standard&rows=${datasources.europeana.pagesize}&start=${ ( (explore.page -1) * datasources.europeana.pagesize ) + 1 }&${ valid( filterby ) && Object.values( d.filter_map ).includes( filterby ) ? "qf=" + filterby : "qf=text,image,video,sound" }',
    icon:                   '<img class="datasource-icon" alt="Europeana datasource" src="/assets/icons/europeana.svg" alt="Europeana logo">',
    icon_invert:            true,
    display_url:            'https://www.europeana.eu/${language}/item${gid}',
    code_autocomplete:      'autocompleteEuropeana( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsEuropeana( topicResults, struct, index ) );',
    code_resolve:           'resolveEuropeana( result, renderObject )',
    code_render_mark:       'renderMarkEuropeana( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.europeana.endpoint}/entity/suggest?wskey=4ZViVZKMe&text=${term}&media=true&sort=${ valid( sortby )? sortby : "score+desc" }&rows=${datasources.europeana.autocomplete_limit}&type=&scope=europeana&language=${explore.language}',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'rijksmuseum': {
    active:                 false,
    name:                   'Rijksmuseum',
    description:            '🇳🇱 museum image library',
    tag:                    'arts-culture',
    qid:                    'Q190804',
    protocol:               'rest',
    endpoint:               'https://www.rijksmuseum.nl/api', // see: https://data.rijksmuseum.nl/object-metadata/api/
    format:                 'json',
    connect:                'json',
    pagesize:               4,
    sort_map:               {
                              'none'            : 'relevance',
                              'relevance-desc'  : 'relevance',
                              'relevance-asc'   : 'relevance',
                              'date-desc'       : 'achronologic',
                              'date-asc'        : 'chronologic',
                              'update-desc'     : 'achronologic',
                              'update-asc'      : 'chronologic',
                              'random'          : 'objecttype',
                              'citations-desc'  : 'relevance',
                              'citations-asc'   : 'relevance',
                              'title-desc'      : 'relevance', // 'artist', // note: not quite the same
                              'title-asc'       : 'relevance', // 'artistdesc', // note: not quite the same
                              'distance-desc'   : 'relevance',
                              'distance-asc'    : 'relevance',
                            },
    media:                  [ 'image' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '', // many sub-types: painting, ...
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.rijksmuseum.endpoint}/${ selectLanguageFrom( ["nl", "en"], "en" ) }/collection?key=8MT2OLE3&imgonly=true&s=${ valid( sortby )? sortby : "relevance" }&p=${explore.page}&ps=${datasources.rijksmuseum.pagesize}&culture=${ selectLanguageFrom( ["nl", "en"], "en" ) }&q=${ removebracesTitle(term) }',
    icon:                   '<img class="datasource-icon" alt="Rijksmuseum datasource" src="/assets/icons/rijksmuseum.svg" alt="Rijksmuseum logo">',
    icon_invert:            true,
    display_url:            'https://www.rijksmuseum.nl/${ selectLanguageFrom( ["nl", "en"], "en" ) }/${ valid ( explore.language === "nl" )? "collectie" : "collection" }/${gid}',
    code_autocomplete:      'autocompleteRijksmuseum( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsRijksmuseum( topicResults, struct, index ) );',
    code_resolve:           'resolveRijksmuseum( result, renderObject )',
    code_render_mark:       'renderMarkRijksmuseum( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.rijksmuseum.endpoint}/${ selectLanguageFrom( ["nl", "en"], "en" ) }/collection?key=8MT2OLE3&imgonly=true&s=${ valid( sortby )? sortby : "relevance" }&p=1&ps=${datasources.rijksmuseum.autocomplete_limit}&culture=${ selectLanguageFrom( ["nl", "en"], "en" ) }&q=${ removebracesTitle(term) }',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'smithsonian3D': {
    active:                 false,
    name:                   'Smithsonian 3D',
    description:            '🇺🇸 physical object scans - BETA',
    tag:                    'arts-culture',
    qid:                    'Q131626',
    protocol:               'rest',
    endpoint:               'https://3d-api.si.edu/api/v1.0/content/file/search', // see: https://3d-api.si.edu/api-docs/
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    media:                  [ '3D' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
                            // FIXME: &q=mandible AND how to specify more than one file format?
    url:                    '${datasources.smithsonian3D.endpoint}?q=${term}&model_type=gltf&rows=${datasources.smithsonian3D.pagesize}&start=${ (explore.page -1) * datasources.smithsonian3D.pagesize }',
    icon:                   '<img class="datasource-icon" alt="Smithsonian 3D datasource" src="/assets/icons/smithsonian3D.svg" alt="Smithsonian logo">',
    icon_invert:            false,
    display_url:            'https://${explore.host}${explore.base}/app/3D/#model=${ encodeURIComponent( url )}',
    code_autocomplete:      'autocompleteSmithsonian3D( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsSmithsonian3D( topicResults, struct, index ) );',
    code_resolve:           'resolveSmithsonian3D( result, renderObject )',
    code_render_mark:       'renderMarkSmithsonian3D( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.smithsonian3D.endpoint}?q=${term}&model_type=gltf&rows=${datasources.smithsonian3D.autocomplete_limit}&start=0',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'openalex': {
    active:                 false,
    name:                   'OpenAlex',
    description:            'science articles',
    tag:                    'science',
    qid:                    'Q107507571',
    protocol:               'rest',
    endpoint:               'https://api.openalex.org/works', // see: https://docs.openalex.org/how-to-use-the-api/api-overview
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : 'relevance_score:desc',
                              'relevance-desc'  : 'relevance_score:desc',
                              'relevance-asc'   : 'cited_by_count:asc', // Note: "OpenAlex: Sorting relevance score ascending is not allowed."
                              'date-desc'       : 'publication_date:desc',
                              'date-asc'        : 'publication_date:asc',
                              'update-desc'     : 'publication_date:desc',
                              'update-asc'      : 'publication_date:asc',
                              'random'          : 'display_name',
                              'citations-desc'  : 'cited_by_count:desc',
                              'citations-asc'   : 'cited_by_count:asc',
                              'title-desc'      : 'display_name:desc',
                              'title-asc'       : 'display_name:asc',
                              'distance-desc'   : 'relevance_score:desc',
                              'distance-asc'    : 'relevance_score:desc',
                            },
    media:                  [ 'text' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.openalex.endpoint}?search=${term}&sort=${ valid( sortby )? sortby : "relevance_score:desc" }&filter=language:${explore.language},language:en&page=${explore.page}&per-page=${datasources.openalex.pagesize}',
    icon:                   '<img class="datasource-icon" alt="OpenAlex logo" src="/assets/icons/openalex.svg" alt="OpenAlex logo">',
    icon_invert:            true,
    display_url:            '${url}',
    code_autocomplete:      'autocompleteOpenAlex( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsOpenAlex( topicResults, struct, index ) );',
    code_resolve:           'resolveOpenAlex( result, renderObject )',
    code_render_mark:       'renderMarkOpenAlex( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.openalex.endpoint}?search=${term}&sort=${ valid( sortby )? sortby : "relevance_score:desc" }&filter=language:{explore.language},language:en&page=1&per-page=${datasources.openalex.autocomplete_limit}',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'arxiv': {
    active:                 false,
    name:                   'arXiv',
    description:            'science articles',
    tag:                    'science',
    qid:                    'Q118398',
    protocol:               'rest',
    endpoint:               'https://export.arxiv.org/api/query', // see: https://info.arxiv.org/help/api/user-manual.html
    format:                 'json',
    connect:                'xml',
    pagesize:               5,
    sort_map:               {
                              'none'            : 'relevance',
                              'relevance-desc'  : 'relevance',
                              'relevance-asc'   : 'relevance',
                              'date-desc'       : 'submittedDate',
                              'date-asc'        : 'submittedDate',
                              'update-desc'     : 'lastUpdatedDate',
                              'update-asc'      : 'lastUpdatedDate',
                              'random'          : 'relevance',
                              'citations-desc'  : 'relevance',
                              'citations-asc'   : 'relevance',
                              'title-desc'      : 'relevance',
                              'title-asc'       : 'relevance',
                              'distance-desc'   : 'relevance',
                              'distance-asc'    : 'relevance',
                            },
    media:                  [ 'text' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.arxiv.endpoint}?search_query=all:${term}&sortBy=${ valid( sortby )? sortby : "relevance" }&sortOrder=${getSortDirection( source )}&start=${ ( explore.page - 1) * datasources.arxiv.pagesize }&max_results=${datasources.arxiv.pagesize}',
    icon:                   '<img class="datasource-icon" alt="arXiv logo" src="/assets/icons/arxiv.svg" alt="arXiv logo">',
    icon_invert:            false,
    display_url:            '${url}',
    code_autocomplete:      'autocompleteArxiv( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsArxiv( topicResults, struct, index ) );',
    code_resolve:           'resolveArxiv( result, renderObject )',
    code_render_mark:       'renderMarkArxiv( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.arxiv.endpoint}?search_query=all:${term}&sortBy=${ valid( sortby )? sortby : "relevance" }&sortOrder=${getSortDirection( source )}&start=0&max_results=${datasources.arxiv.autocomplete_limit}',
    autocomplete_format:    'json',
    autocomplete_connect:   'xml',
    autocomplete_limit:     5,
  },

  'archive_scholar': {
    active:                 false,
    name:                   'Internet Archive Scholar',
    description:            'science articles',
    tag:                    'science',
    qid:                    'Q115667709',
    protocol:               'rest',
    endpoint:               'https://scholar.archive.org', // see: https://scholar.archive.org/api/redoc
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : 'relevancy',
                              'relevance-desc'  : 'relevancy',
                              'relevance-asc'   : 'relevancy',
                              'date-desc'       : 'time_desc',
                              'date-asc'        : 'time_asc',
                              'update-desc'     : 'time_desc',
                              'update-asc'      : 'time_asc',
                              'random'          : 'time_asc',
                              'citations-desc'  : 'relevancy',
                              'citations-asc'   : 'relevancy',
                              'title-desc'      : 'relevancy',
                              'title-asc'       : 'relevancy',
                              'distance-desc'   : 'relevancy',
                              'distance-asc'    : 'relevancy',
                            },
    media:                  [ 'text' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.archive_scholar.endpoint}/search?sort_order=${ valid( sortby )? sortby : "relevancy" }&limit=${datasources.archive_scholar.pagesize}&offset=${ (explore.page -1) * datasources.archive_scholar.pagesize }&q=lang%3A${language}+${term}',
    icon:                   '<img class="datasource-icon" alt="Internet Archive Scholar datasource" src="/assets/icons/archive_scholar.svg" alt="Internet Archive Scholar logo">',
    icon_invert:            true,
    display_url:            '${url}',
    code_autocomplete:      'autocompleteArchiveScholar( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsArchiveScholar( topicResults, struct, index ) );',
    code_resolve:           'resolveArchiveScholar( result, renderObject )',
    code_render_mark:       'renderMarkArchiveScholar( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    false, // Note: It seems this API is too rate-limited to allow autocompletion-requests
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.archive_scholar.endpoint}/search?sort_order=${ valid( sortby )? sortby : "relevancy" }&limit=${datasources.archive_scholar.pagesize}&offset=0&q=lang%3A${language}+"${term}"',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'gbif': {
    active:                 false,
    name:                   'GBIF',
    description:            'species observations - BETA',
    tag:                    'science',
    qid:                    'Q1531570',
    protocol:               'rest',
    endpoint:               'https://api.gbif.org/v1/species', // see: https://www.gbif.org/developer/species
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    media:                  [ 'text' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.gbif.endpoint}/search?verbose=true&rank=species&q=${term}&limit=${datasources.gbif.pagesize}&offset=${ (explore.page -1) * datasources.gbif.pagesize }',
    icon:                   '<img class="datasource-icon" alt="GBIF datasource" src="/assets/icons/gbif.png" alt="GBIF logo">',
    icon_invert:            false,
    display_url:            'https://${explore.host}${explore.base}/app/response/gbif-map.php?l=${explore.language}&t=${title}&id=${gid}',
    code_autocomplete:      'autocompleteGBIF( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsGBIF( topicResults, struct, index ) );',
    code_resolve:           'resolveGBIF( result, renderObject )',
    code_render_mark:       'renderMarkGBIF( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.gbif.endpoint}/suggest?q=${term}&limit=${datasources.gbif.autocomplete_limit}&offset=0',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },


  'gleif': {
    active:                 false,
    name:                   'GLEIF',
    description:            'legal entities',
    tag:                    'business',
    qid:                    'Q6517388',
    protocol:               'rest',
    endpoint:               'https://api.gleif.org/api/v1/lei-records', // see: https://documenter.getpostman.com/view/7679680/SVYrrxuU?version=latest
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               { // MAYBE TODO: see sortable field: https://api.gleif.org/api/v1/fields the use as: "sort=entity.legalName"
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    media:                  [ 'entity' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.gleif.endpoint}?page[size]=${datasources.gleif.pagesize}&page[number]=${explore.page}&filter[entity.names]=${term}',
    icon:                   '<img class="datasource-icon" alt="GLEIF datasource" src="/assets/icons/gleif.svg" alt="Gleif logo">',
    icon_invert:            false,
    display_url:            'https://www.lei-lookup.com/record/${gid}/',
    code_autocomplete:      'autocompleteGleif( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsGleif( topicResults, struct, index ) );',
    code_resolve:           'resolveGleif( result, renderObject )',
    code_render_mark:       'renderMarkGleif( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.gleif.endpoint}?page[size]=${datasources.gleif.autocomplete_limit}&page[number]=1&filter[entity.names]=${term}',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'eu': {
    active:                 false,
    name:                   'EU',
    tag:                    'government',
    description:            '🇪🇺 European Union datasets - BETA',
    qid:                    'Q458',
    protocol:               'rest',
    endpoint:               'https://data.europa.eu/api/hub/search/search', // see: https://data.europa.eu/api/hub/search/
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : 'relevance%2Bdesc',
                              'relevance-desc'  : 'relevance%2Bdesc',
                              'relevance-asc'   : 'relevance%2Basc',
                              'date-desc'       : 'issued%2Bdesc',
                              'date-asc'        : 'issued%2Basc',
                              'update-desc'     : 'modified%2Bdesc',
                              'update-asc'      : 'modified%2Basc',
                              'random'          : 'identifier%2Bdesc',
                              'citations-desc'  : 'is_referenced_by%2Bdesc',
                              'citations-asc'   : 'is_referenced_by%2Basc',
                              'title-desc'      : 'title.en%2Bdesc',
                              'title-asc'       : 'title.en%2Basc',
                              'distance-desc'   : 'relevance%2Bdesc',
                              'distance-asc'    : 'relevance%2Bdesc',
                            },
    media:                  [ 'data' ], //  "dataset", "catalogue", "dataservice", "vocabulary", "resource"
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.eu.endpoint}?q=${term}&filter=dataset&limit=${datasources.eu.pagesize}&page=${explore.page - 1}&sort=${ valid( sortby )? sortby : "relevance%2Bdesc" },+modified%2Bdesc,+title.en%2Basc&facetOperator=AND&facetGroupOperator=AND&dataServices=false&facets={"publisher":[],"format":[],"catalog":[],"categories":[],"keywords":[],"country":[],"license":[]}',
    icon:                   '<img class="datasource-icon" alt="European Union datasource" src="/assets/icons/eu.svg" alt="EU flag">',
    icon_invert:            false,
    display_url:            'https://data.europa.eu/data/datasets/${gid}?locale=${ selectLanguageFrom( ["en","nl","es","de","it","fr"], "en" ) }',
    code_autocomplete:      'autocompleteEU( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsEU( topicResults, struct, index ) );',
    code_resolve:           'resolveEU( result, renderObject )',
    code_render_mark:       'renderMarkEU( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.eu.endpoint}?q=${term}&filter=dataset&limit=${datasources.eu.autocomplete_limit}&page=0&sort=${ valid( sortby )? sortby : "relevance%2Bdesc" },+modified%2Bdesc,+title.en%2Basc&facetOperator=AND&facetGroupOperator=AND&dataServices=false&facets={"publisher":[],"format":[],"catalog":[],"categories":[],"keywords":[],"country":[],"license":[]}',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'gdelt': {
    active:                 false,
    name:                   'GDELT',
    description:            'news reports - BETA',
    tag:                    'work',
    qid:                    'Q18357239',
    protocol:               'rest',
    endpoint:               'https://api.gdeltproject.org/api/v2/context/context', // see: https://blog.gdeltproject.org/announcing-the-gdelt-context-2-0-api/
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : 'DateDesc',
                              'date-asc'        : 'DateAsc',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    media:                  [ 'text' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.gdelt.endpoint}?format=html&timespan=2D&query=${ encodeURIComponent( term ) }&searchlang=${explore.language_name}&mode=artlist&maxrecords=5&format=json',
    icon:                   '<img class="datasource-icon" alt="GDELT logo" src="/assets/icons/gdelt.svg" alt="GDELT logo">',
    icon_invert:            true,
    display_url:            '${url}',
    code_autocomplete:      'autocompleteGDELT( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsGDELT( topicResults, struct, index ) );',
    code_resolve:           'resolveGDELT( result, renderObject )',
    code_render_mark:       'renderMarkGDELT( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    false,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.gdelt.endpoint}?format=html&timespan=2D&query=${ encodeURIComponent( term ) }&searchlang=${explore.language_name}&mode=artlist&maxrecords=${datasources.gdelt.autocomplete_limit}&format=json',

    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  'occrp': {
    active:                 false,
    name:                   'OCCRP Aleph',
    description:            'investigative journalism entities - BETA',
    tag:                    'science',
    qid:                    'Q7102061',
    protocol:               'rest',
                              // see:
                              //  https://redocly.github.io/redoc/?url=https://aleph.occrp.org/api/openapi.json#tag/Entity
                              //  https://docs.aleph.occrp.org/developers/followthemoney/
    endpoint:               'https://aleph.occrp.org/api/2/entities',
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    media:                  [ 'entity' ],
    filter_map:             {
                              'none'            : '',
                              'text'            : '',
                              'image'           : '',
                              'video'           : '',
                              'audio'           : '',
                              'data'            : '',
                              '3D'              : '',
                              'software'        : '',
                              'archive'         : '',
                              'entity'          : '',
                            },
    url:                    '${datasources.occrp.endpoint}?q=${term}&page=${explore.page}&limit=${datasources.occrp.pagesize}&filter:schemata=Thing',
    icon:                   '<img class="datasource-icon" alt="OCCRP logo" src="/assets/icons/occrp.svg" alt="OCCRP logo">',
    icon_invert:            false,
    display_url:            '${url}',
    code_autocomplete:      'autocompleteOCCRP( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsOCCRP( topicResults, struct, index ) );',
    code_resolve:           'resolveOCCRP( result, renderObject )',
    code_render_mark:       'renderMarkOCCRP( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.occrp.endpoint}?q=${term}&page=1&limit=${datasources.occrp.autocomplete_limit}&filter:schemata=Thing',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },

  /*
  'inaturalist': {
    active:                 false,
    name:                   'iNaturalist',
    description:            'taxon observations - BETA',
    tag:                    'science',
    qid:                    'Q16958215',
    protocol:               'rest',
    endpoint:               'https://api.inaturalist.org/v1/taxa', // see: https://api.inaturalist.org/v1/docs/#!/Taxa/get_taxa
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    url:                    '${datasources.inaturalist.endpoint}?q=${term}&order=desc&page=${explore.page}&per_page=${datasources.inaturalist.pagesize}',
    icon:                   '<img class="datasource-icon" alt="iNaturalist logo" src="/assets/icons/inaturalist.svg" alt="iNaturalist logo">',
    icon_invert:            false,
    display_url:            '${url}',
    code_autocomplete:      'autocompleteInaturalist( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsInaturalist( topicResults, struct, index ) );',
    code_resolve:           'resolveInaturalist( result, renderObject )',
    code_render_mark:       'renderMarkInaturalist( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.inaturalist.endpoint}?q=${term}&order=desc&page=1&per_page=${datasources.inaturalist.autocomplete_limit}',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },
  */

  /*
  'rkd': {
    active:                 false,
    name:                   'RKD',
    description:            '🇳🇱 art-history library - FAILING',
    tag:                    'arts-culture',
    qid:                    'Q758610',
    protocol:               'rest',
    // see: https://api.rkd.nl/api
    //endpoint:             'https://api.rkd.nl/api/instant/images',
    endpoint:               '/app/proxy/rkd',
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    url:                    '${datasources.rkd.endpoint}?query=${term}&format=json&rows=${datasources.rkd.pagesize}&start=${ (explore.page -1) * datasources.rkd.pagesize }',
    //url:                    '${datasources.rkd.endpoint}?query=${term}&format=json&rows=${datasources.rkd.pagesize}&start=${ (explore.page -1) * datasources.rkd.pagesize }',
    icon:                   '<img class="datasource-icon" alt="RKD datasource" src="/assets/icons/rkd.svg" alt="RKD logo">',
    icon_invert:            false,
    display_url:            '',
    code_autocomplete:      'autocompleteRKD( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsRKD( topicResults, struct, index ) );',
    code_resolve:           'resolveRKD( result, renderObject )',
    code_render_mark:       'renderMarkRKD( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.rkd.endpoint}?query=${term}&format=json&rows=${datasources.rkd.autocomplete_limit}&start=0',
    //autocomplete_url:       '${datasources.rkd.endpoint}?query=${term}&format=json&rows=${datasources.rkd.autocomplete_limit}&start=0',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },
  */


  /*
  'snomed': {
    active:                 false,
    name:                   'SNOMED CT',
    description:            'medical ontology',
    tag:                    'science',
    qid:                    'Q1753883',
    protocol:               'rest',
    endpoint:               'https://browser.ihtsdotools.org/snowstorm/snomed-ct/browser/MAIN/2023-04-30/descriptions',
    format:                 'json',
    connect:                'json',
    pagesize:               5,
    sort_map:               {
                              'none'            : '',
                              'relevance-desc'  : '',
                              'relevance-asc'   : '',
                              'date-desc'       : '',
                              'date-asc'        : '',
                              'update-desc'     : '',
                              'update-asc'      : '',
                              'random'          : '',
                              'citations-desc'  : '',
                              'citations-asc'   : '',
                              'title-desc'      : '',
                              'title-asc'       : '',
                              'distance-desc'   : '',
                              'distance-asc'    : '',
                            },
    url:                    '${datasources.snomed.endpoint}?&limit=${datasources.snomed.pagesize}&term=${term}&active=true&conceptActive=true&lang=english&groupByConcept=true&offset=${ (explore.page -1) * datasources.snomed.pagesize }',
    icon:                   '<img class="datasource-icon" alt="SNOMED CT datasource" src="/assets/icons/snomed.png" alt="SNOMED CT logo">',
    icon_invert:            false,
    display_url:            'https://browser.ihtsdotools.org/?perspective=full&conceptId1=${gid}/',
    code_autocomplete:      'autocompleteSnomed( r, dataset )',
    code_data_collect:      'my_promises.push( processResultsSnowmed( topicResults, struct, index ) );',
    code_resolve:           'resolveSnomed( result, renderObject )',
    code_render_mark:       'renderMarkSnomed( inputs, source, q_, show_raw_results, id )',
    autocomplete_active:    true,
    autocomplete_protocol:  'json',
    autocomplete_url:       '${datasources.snomed.endpoint}?&limit=${datasources.snomed.autocomplete_limit}&term=${term}&active=true&conceptActive=true&lang=english&groupByConcept=true&offset=0',
    autocomplete_format:    'json',
    autocomplete_connect:   'json',
    autocomplete_limit:     5,
  },
  */

};

// Note: Update this list and the "index.template.php" datasource-set select-options when needed;
const datasource_set_map = {
  none:       [''],
  references: ['wikipedia', 'wikidata'],
  culture:    ['commons', 'archive', 'europeana', 'rijksmuseum', 'smithsonian3D'],
  science:    ['archive_scholar', 'arxiv', 'openalex', 'gbif'],
  business:   ['gleif', 'eu', 'gdelt', 'occrp'],
}

const datasource_sets = Object.keys( datasource_set_map );

// Note: Update this list and the "index.template.php" select-options, whenever the datasource "sort_map" structure changes.
const valid_sort_options = [
  'none',
  'relevance-desc',
  'relevance-asc',
  'date-desc',
  'date-asc',
  'update-desc',
  'update-asc',
  'random',
  'citations-desc',
  'citations-asc',
  'title-asc',
  'title-desc',
  'distance-asc',
  'distance-desc',
];

// Note: Update this list and the "index.template.php" select-options, whenever the datasource "filter_map" structure changes.
const valid_filter_options = [
  'none',
  'text',
  'image',
  'video',
  'audio',
  'data',
  '3D',
  'software',
  'archive',
  'entity',
];
