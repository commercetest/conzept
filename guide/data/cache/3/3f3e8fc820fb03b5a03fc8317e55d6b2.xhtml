
<h1 class="sectionedit1" id="architecture">architecture</h1>
<div class="level1">

<p>
The main architectural choices made in the Conzept application are:
</p>
<ul>
<li class="level1"><div class="li"> <strong><em class="u">Value the <a href="https://conze.pt/explore/user experience?l=en&amp;t=string" class="interwiki iw_explore" target="_blank" title="https://conze.pt/explore/user experience?l=en&amp;t=string" rel="noopener">user experience</a> above all else</em>.</strong> Keep things <strong>simple</strong>, <strong>web native</strong>, <strong>live</strong>, <strong>accessible</strong>, <strong><a href="https://calmtech.com" class="urlextern" target="_blank" title="https://calmtech.com" rel="ugc nofollow noopener">calm</a></strong>, <strong>performant</strong> and <strong>fun to code and maintain.</strong></div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Use <strong><em class="u">embedded iframes</em></strong> (and self-hosted app URLs) as a form of very simple, well-isolated &#039;micro-services&#039;. However, to the user Conzept should <em>feel</em> as one application. The benefits this simple composition mechanism brings, is very good compatibility with most of the web-tools already written and the ones still to be written! See also: <a href="https://github.com/oilshell/oil/wiki/Perlis-Thompson-Principle" class="urlextern" target="_blank" title="https://github.com/oilshell/oil/wiki/Perlis-Thompson-Principle" rel="ugc nofollow noopener">Perlis-Thompson principle</a>, <a href="https://www.oilshell.org/blog/2022/02/diagrams.html" class="urlextern" target="_blank" title="https://www.oilshell.org/blog/2022/02/diagrams.html" rel="ugc nofollow noopener">narrow-waist concept</a>.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> The communication between Conzept and <a href="/guide/used_projects#embedded_apps" class="wikilink1" title="used_projects" data-wiki-id="used_projects">embedded apps</a> is done using <strong><em class="u"><a href="/guide/url_structure" class="wikilink1" title="url_structure" data-wiki-id="url_structure">URL-parameters</a></em></strong> (examples: title, entity ID, language code, <abbr title="Uniform Resource Locator">URL</abbr>) and <strong><em class="u">postMessage() calls</em></strong>.</div>
<ul>
<li class="level2"><div class="li"> Note: Some styling of embedded apps is also applied by directly setting common <abbr title="Cascading Style Sheets">CSS</abbr> classes on the body-element of the iframe (such as the “dark” class for dark-mode styles, or the “rtl” class for right-to-left language-scripts).</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Use <strong><em class="u">declarative data definitions</em></strong> where possible (examples: <a href="/guide/section_customization" class="wikilink1" title="section_customization" data-wiki-id="section_customization">sections</a>, <a href="/guide/field_customization" class="wikilink1" title="field_customization" data-wiki-id="field_customization">fields</a>, topic headlines, <a href="/guide/topic_classification" class="wikilink1" title="topic_classification" data-wiki-id="topic_classification">topic tags and indicators</a>). Avoid code duplication where possible, instead use use expressive data structures parsed by minimal code. Editing textual data-structures is also a lot easier than editing code. This approach also allows for text-tools to automate some of these tasks.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> <strong>Use vanilla JS</strong> (avoid complex <a href="https://catonmat.net/frameworks-dont-make-sense" class="urlextern" target="_blank" title="https://catonmat.net/frameworks-dont-make-sense" rel="ugc nofollow noopener">frameworks</a> inverting control), with jQuery (or plain JS) for managing the DOM.</div>
<ul>
<li class="level2"><div class="li"> jQuery - and the jQuery-dependent plugins - may be removed or replaced in the future, if possible and beneficial.</div>
</li>
<li class="level2"><div class="li"> When needed: use <a href="https://conze.pt/explore/WebAssembly?l=en&amp;t=string" class="interwiki iw_explore" target="_blank" title="https://conze.pt/explore/WebAssembly?l=en&amp;t=string" rel="noopener">WebAssembly</a> for performance-demanding, compute parts in the code.</div>
</li>
<li class="level2"><div class="li"> If some (relatively complex) <abbr title="HyperText Markup Language">HTML</abbr>-widget needs to be used in many different places: consider creating a <strong><a href="https://conze.pt/explore/Web Components?l=en&amp;t=string" class="interwiki iw_explore" target="_blank" title="https://conze.pt/explore/Web Components?l=en&amp;t=string" rel="noopener">web component</a></strong>. This was done for the <a href="/guide/apps#organism_occurrence_map" class="wikilink1" title="apps" data-wiki-id="apps">organism occurrence map</a>.</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Main types of data-types to use: <strong>plain strings, URLs, entity ID&#039;s, JSON and lists of JavaScript objects.</strong></div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Allow the <strong>safe use of <a href="https://conze.pt/explore/Eval?l=en&amp;t=string" class="interwiki iw_explore" target="_blank" title="https://conze.pt/explore/Eval?l=en&amp;t=string" rel="noopener">eval()</a></strong> needed for flexible <a href="/guide/field_customization" class="wikilink1" title="field_customization" data-wiki-id="field_customization">field definitions</a>. This is safe, as only the admins/devs can update the field definitions. Conzept is also a mainly client-side application, with no user-data being stored on the server.</div>
</li>
</ul>

</div>
