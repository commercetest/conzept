====== roadmap ======

===== general =====

  * Fix the items mentioned in **[[issues|issues]]**.

  * **[[architecture|Architectural]] vision**
    * Work towards creating more **data-defined software... do more with less code.** This makes the software more 'malleable' for various contexts (eg. datasources, fields, languages, content rendering functions).
    * Improve and maintain **conceptual integrity** of how the various Conzept framework pieces fit together: [[datasources]], [[field customization|fields]], [[URL structure]], central configuration of common data across apps, easy intercommunication between apps, recursive Conzept views, 5D views (3D location + 1D time + 1D data-view).

  * Get more **engagement and feedback** from users and software developers.
    * What should and could be improved for them in the knowledge exploration and learning process?


===== search =====

  * **Composable search** functionality (mostly done). Allow for combining:
      * search terms
        * including "double-quotes" (for literal phrase searching) (TODO: test for using multiple literal phrases)
      * search scope: datasource set or individual datasources 
      * search filters: media-type (done), geospatial contraints, temporal (year-range) contraints  
      * search sorting: common sort-keys

  * Unfinshed search-modalities:
    * **Geospatial search** (status: partly done for Wikidata)
      * open issue: URL-serialization not working correctly.
      * Implement for other datasources (with geo-search support)
    * **Structured search** using SPARQL (beyond Wikidata)
      * Ontology classes
      * Ontology properties
      * Autocompletion
      * Multi-lingual labels
      * Handle CORS issues

  * **Potential new search modalitites**:
    * Temporal-range search (point-in-time, start-time, end-time) (status: implementation started)

  * Improve existing search modalities:
    * ? Wikidata: Allow for filtering by raw-text-strings in "structured search" (currently not supported in the Wikidata-query-builder)
    * Wikidata: Add **claim-support** to the Wikidata-data fetching (and support for claim-data in the field-definitions).

  * **Speech-based search input**
    * how to allow for multi-line text input?
    * hwo to combine speech-input with search commands?

  * **[[user_manual#search_commands|Search commands]]**
    * Currently this is used a little for AI-chat and simple mathematical graph plotting.
    * How could we combine this with multi-modal, client-side AI?
    * What other search-commands are needed?

===== datasources =====

  * Implement async wikidata-enriching (partly done)

  * More control over how datasources are used, with toggle-switches for:
    * datasource is active (boolean toggle)
      * datasource autocomplete (boolean toggle)
      * datasource searching (boolean toggle)

  * Candidate new search-in datasource-sets:
    * art / museum archives
    * youtube (requires approval)
    * ...

  * Candidate new search-in datasource-sets:

===== presentation system =====

  * Allow for extra Text-to-Speech (TTS) storylines around a topic (beyond Wikipedia and Wikidata information). 
    * Related books, science articles (partly done), AI-generated summaries and other content, AI explain text selection, ...? 

  * UI for creating and sharing user-created presentations around a topic.
    * Allow for bookmarking presentations

===== browser extension =====

  * Re-implement the extension with **[[https://developer.chrome.com/docs/extensions/mv3/intro/|Manifest v3]] support** (MV3). This is a requirement for the Chrome extension store.
    * Maybe look into using the [[https://github.com/PlasmoHQ/plasmo|Plasmo]] browser extension framework.
    * Goal: Provide a right-click menu-option to search on Conzept (make it work in embedded iframes and perhaps PDFs too, if possible)

===== frontend ideas =====

  * **Bookmarking**:
    * Cross-tab bookmark state-syncing
    * Allow for bookmarking presentations
    * Bookmark edit mode -> then click on bookmark -> display bookmark edit modal -> save button
    * Better generic data support, based on the "item data object"
    * Add more input-formats:
      * images (experimental support)
      * drawings (using tldraw or excalidraw)
      * speech-to-text transcript ([[https://github.com/LittlePath/live-transcript|webcomponent]])
      * audio ([[https://github.com/LittlePath/audio-recorder|webcomponent]])
      * video ([[https://github.com/LittlePath/video-recorder|webcomponent]])
      * longer notes
      * ? PDF
    * Research better drag-and-drop support

  * Look into using more webcomponents:
    * [[https://shoelace.style|Shoelace webcomponent system]]
    * [[https://design-system.w3.org/|W3C design system]]
    * [[https://component.gallery/|component.gallery]] (overview of webcomponents)

  * Add optional **geolocation-support**, so we could route a user from the current location to the location of a topic, using the [[https://twitter.com/conzept__/status/1490300622360518663|OSMR routing app]]. See also: [[https://github.com/jamealg/KT-companion|offline hiking-maps app]]

  * Find and integrate a **more lightweight MIDI-webcomponent**, if available ([[https://github.com/cifkao/html-midi-player|html-midi-player]] is more than 0.5MB by itself!)

  * JSON-LD enhancement: "Add schema:about properties that include #Wikidata (/entity/{id}) and #DBpedia (/resource/{id}) identifiers as property values." [[https://twitter.com/kidehen/status/1565006013350248449|*]] (this is useful when there are multiple subjects, beyond the main subject)

===== admin-dev workflows =====

  * Improve the workflow for adding [[datasources]].

  * Improve the workflow for adding [[integrating_an_api|API integrations]].

  * Clean up any issues with field definitions:
    * Turn the the inline-API field-structure into an object (instead of a string)?

  * Field-translation support: Create a structure to store field-label translations (title and icon-title), both for Wikidata and non-Wikidata fields.
    * Allow the [[adding_new_wikidata_properties|json2fields]] script to fetch and store property translations too.

  * Add a test-framework -> start adding tests for the most essential / complex code parts

  * How to detect if the field URL could be embedded (instead of opening a a new tab)? (run a headless browser loading an iframe with the URL, checking for CORS-errors?)

===== educational-support enhancements  =====

  * **Collaborative & social learning** features:
    * shared audio and chat (eg. [[https://github.com/lyricat/mornin.fm|p2p audio-chat]] and [[https://www.hyperhyperspace.org/|text-chat]] rooms for each topic)
  * **Quizzing**: Auto-generated, [[https://fs.blog/spacing-effect/|spaced-repetition]]-based facts learning (for a certain topic / set of topics / topic-domain)
  * **Experiencing / Simulating**: eg. play Chess positions (done), ...
  * ? Note-taking integration  (eg.: [[https://bangle.io/|Bangle]], ...)
  * Better ways to indicate personal and professional interests (similar to the persona-tags setting)

===== other ideas =====

  * ? Offline(-first) support with content-caching (especially useful when traveling and/or without reliable internet-connectivity).
    * Example apps: [[https://github.com/jamealg/KT-companion|hiking-map app]]

  * ? Research creating some kind of a simple web-application interface standard for input/output/event-handling:
    * URL parameter IO (iso2 language, search-string, ID, ...)
    * Event-handling (other view triggers, key-bindings, fullscreening, ...)

  * ? [[https://github.com/sebferre/sparklis|Sparklis]] / [[https://github.com/epoz/shmarql|shmarql]] -> needs CORS-issue workaround
    * [[http://www.irisa.fr/LIS/ferre/sparklis/examples.html|NLP query examples]]
    * sparql-endpoint testing: [[https://conze.pt/explore/?l=en&t=&s=true&query={%22conditions%22:[{%22propertyId%22:%22P5305%22,%22propertyDataType%22:%22url%22,%22propertyValueRelation%22:%22regardless-of-value%22,%22referenceRelation%22:%22regardless%22,%22value%22:%22%22,%22subclasses%22:false,%22conditionRelation%22:null,%22negate%22:false}],%22limit%22:10,%22useLimit%22:true,%22omitLabels%22:false}|query all endpoints]] (note: some endpoints are dead) -> then open "sparql explorer 2" in the main-section 
    * Handle HTTP GET/POST CORS issues with the SPARQL-endpoints (not sure POST is supported in the current Conzept proxy-service)
    * build steps [[https://github.com/sebferre/sparklis/issues/9#issuecomment-1018673156|here]]
    * See also: **[[https://open-source.pages.logilab.fr/SemWeb/sparqlexplorer/?endpoint=https%253A%252F%252Fldf.fi%252Fmufi%252Fsparql|SparqlExplorer]]**
      * [[https://forge.extranet.logilab.fr/open-source/SemWeb/sparqlexplorer/|git repo]]

